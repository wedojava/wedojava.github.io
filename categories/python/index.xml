<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 回风舞雪</title>
    <link>https://wedojava.github.io/categories/python/</link>
    <description>Recent content in python on 回风舞雪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Jul 2019 11:50:00 +0800</lastBuildDate>
    
	<atom:link href="https://wedojava.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary I/O operation</title>
      <link>https://wedojava.github.io/posts/binary-io-operation/</link>
      <pubDate>Fri, 26 Jul 2019 11:50:00 +0800</pubDate>
      
      <guid>https://wedojava.github.io/posts/binary-io-operation/</guid>
      <description>I coped with character type coversion to let it looks like c type, and search bytes from *.dll to modify it. so, there is sth I learned and written down here.
# Binary I/O operation Define!
def hex_read(filepath: str) -&amp;gt; bytearray: if os.path.isfile(filepath): with open(filepath, &amp;#39;rb&amp;#39;) as f: data = bytearray(f.read()) return data Usage:
dll_data = hex_read(&amp;#39;D:\\test\\test.dll&amp;#39;) Find bytes and replace it:
index_start = dll_data.find(b&amp;#39;\x85\x69\xf0\x7f&amp;#39;) index_end = index_start + 100 if index_start != -1: data_old = dll_data[index_start:index_end] data_new = replacebytes # replacebytes is the content you want to replace dll_data_new = dll_data.replace(data_old, data_new) with open(&amp;#39;D:\\test\\test.dll&amp;#39;, &amp;#39;wb&amp;#39;) as f: f.write(dll_data_new) </description>
    </item>
    
    <item>
      <title>Hex byte string int coversion</title>
      <link>https://wedojava.github.io/posts/hex-b-str-int-switch-in-python/</link>
      <pubDate>Fri, 26 Jul 2019 09:56:00 +0800</pubDate>
      
      <guid>https://wedojava.github.io/posts/hex-b-str-int-switch-in-python/</guid>
      <description>Reference:
 https://docs.python.org/zh-cn/3/library/stdtypes.html https://docs.python.org/zh-cn/3/library/struct.html   # Python Types Coversion hey, there are some usefull features below, I will update at intervals:
bit_length() New in version 3.1:
In [73]: n = -37 In [74]: bin(n) Out[74]: &#39;-0b100101&#39; In [75]: n.bit_length() Out[75]: 6  hex to int:
In [59]: int(&#39;0x22357&#39;, 16) Out[59]: 140119  int to hex:
In [32]: hex(141128) Out[32]: &#39;0x22748&#39;  packed binary data to int:
In [70]: struct.unpack(&amp;quot;I&amp;quot;, b&#39;\x57\x23\x02\x00&#39;) Out[70]: (140119,) In [71]: type(struct.unpack(&amp;quot;I&amp;quot;, b&#39;\x57\x23\x02\x00&#39;)) Out[71]: tuple In [72]: struct.unpack(&amp;quot;I&amp;quot;, b&#39;\x57\x23\x02\x00&#39;)[0] Out[72]: 140119   what is param &amp;ldquo;I&amp;rdquo;? Read More about struct  int to packed binary data:</description>
    </item>
    
  </channel>
</rss>